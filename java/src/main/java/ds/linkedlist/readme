MiddleElement

Finding middle element in a linked list

=======================================
DetectLoop

Detect loop in a linked list
   Follow the steps below to solve the problem:

   Traverse the list individually and keep putting the node addresses in a Hash Table.
   At any point, if NULL is reached then return false
   If the next of the current nodes points to any of the previously stored nodes in  Hash then return true.
   TC: O(n)
   AC: O(n)


   Implementation of Floyd’s Cycle-Finding Algorithm:
   Time complexity: O(N), Only one traversal of the loop is needed.
   Auxiliary Space: O(1).

Find length of loop/cycle in given Linked List
    Find the common point in the loop by using the Floyd’s Cycle detection algorithm
    Store the pointer in a temporary variable and keep a count = 0
    Traverse the linked list until the same node is reached again and increase the count while moving to next node.
    Print the count as length of loop

=========================================

RemoveDuplicate

Remove duplicates from a sorted linked list


